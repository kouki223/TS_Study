import type { SchemaOptions } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/schema';
import type { Ensure, Evaluate } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/helpers';
import type { TProperties } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/object';
import { type TMappedResult } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/mapped';
import { type TOmit } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/omit/omit';
type TFromProperties<Properties extends TProperties, PropertyKeys extends PropertyKey[]> = ({
    [K2 in keyof Properties]: TOmit<Properties[K2], PropertyKeys>;
});
type TFromMappedResult<MappedResult extends TMappedResult, PropertyKeys extends PropertyKey[]> = (Evaluate<TFromProperties<MappedResult['properties'], PropertyKeys>>);
export type TOmitFromMappedResult<MappedResult extends TMappedResult, PropertyKeys extends PropertyKey[], Properties extends TProperties = TFromMappedResult<MappedResult, PropertyKeys>> = (Ensure<TMappedResult<Properties>>);
export declare function OmitFromMappedResult<MappedResult extends TMappedResult, PropertyKeys extends PropertyKey[], Properties extends TProperties = TFromMappedResult<MappedResult, PropertyKeys>>(mappedResult: MappedResult, propertyKeys: [...PropertyKeys], options?: SchemaOptions): TMappedResult<Properties>;
export {};
