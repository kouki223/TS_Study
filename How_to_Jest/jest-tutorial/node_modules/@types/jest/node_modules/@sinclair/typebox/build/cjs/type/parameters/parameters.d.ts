import type { TSchema, SchemaOptions } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/schema';
import type { TFunction } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/function';
import { type TTuple } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/tuple';
import { type TNever } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/never';
export type TParameters<Type extends TSchema> = (Type extends TFunction<infer Parameters extends TSchema[], infer _ReturnType extends TSchema> ? TTuple<Parameters> : TNever);
/** `[JavaScript]` Extracts the Parameters from the given Function type */
export declare function Parameters<Type extends TSchema>(schema: Type, options?: SchemaOptions): TParameters<Type>;
