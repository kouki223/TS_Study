import type { TSchema } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/schema';
import type { TIntersect } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/intersect';
import type { TUnion } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/union';
import type { TTuple } from 'jest/node_modules/@sinclair/typebox/build/cjs/type/tuple';
type TRestResolve<T extends TSchema> = T extends TIntersect<infer S extends TSchema[]> ? S : T extends TUnion<infer S extends TSchema[]> ? S : T extends TTuple<infer S extends TSchema[]> ? S : [
];
export type TRest<T extends TSchema> = TRestResolve<T>;
/** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */
export declare function Rest<T extends TSchema>(T: T): TRest<T>;
export {};
